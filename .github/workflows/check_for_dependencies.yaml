name: Check for Arduino Library Dependencies

on:
  workflow_dispatch:
  workflow_call:
    # Map the workflow outputs to job outputs
    outputs:
      has_library_dependencies:
        value: ${{ jobs.check_for_dependencies.outputs.has_library_dependencies }}
      has_example_dependencies:
        value: ${{ jobs.check_for_dependencies.outputs.has_example_dependencies }}
      dep_hash:
        value: ${{ jobs.check_for_dependencies.outputs.dep_hash }}

jobs:
  check_for_dependencies:
    name: Check if there are any library or example dependencies
    runs-on: ubuntu-latest
    outputs:
      has_library_dependencies: ${{ steps.store_dep_hash.outputs.has_library_dependencies }}
      has_example_dependencies: ${{ steps.store_dep_hash.outputs.has_example_dependencies }}
      dep_hash: ${{ steps.store_dep_hash.outputs.dep_hash }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Check for Dependency Files
        id: check_for_deps
        run: |
          if [ "$RUNNER_DEBUG" = "1" ]; then
            echo "Enabling debugging!"
            set -v
            set -x
          fi

          has_library_spec_deps=false
          if [ -e library.json ]
          then
            echo "Library json found at ./library.json"
            if grep -q "\"dependencies\"" library.json; then
              echo "Library json has dependencies"
              has_library_spec_deps=true
            fi
          fi

          has_library_json_deps=false
          if [ -e ./continuous_integration/dependencies.json ]
          then
            echo "Library dependency json found at ./continuous_integration/dependencies.json"
            has_library_json_deps=true
            cat ./continuous_integration/dependencies.json >> consolidated_deps.txt
          fi

          has_library_dependencies=false
          if [ "$has_library_spec_deps" -eq "true" -a "$has_library_json_deps" -eq "true" ]
          then
            has_library_dependencies=true
            echo "has_library_dependencies=${has_library_dependencies}" >> $GITHUB_ENV
          fi

          has_example_dependencies=false
          if [ -e ./examples/example_dependencies.json ]
          then
            echo "Example dependency json found at ./examples/example_dependencies.json"
            has_example_dependencies=true
            cat ./examples/example_dependencies.json >> consolidated_deps.txt
          fi
          echo "has_example_dependencies=${has_example_dependencies}" >> $GITHUB_ENV

      - name: Store Dependency File Hash
        id: store_dep_hash
        run: |
          echo "has_library_dependencies=${{ env.has_library_dependencies }}" >> $GITHUB_OUTPUT
          echo "has_example_dependencies=${{ env.has_example_dependencies }}" >> $GITHUB_OUTPUT
          echo "dep_hash=${{ hashFiles('consolidated_deps.txt') }}" >> $GITHUB_OUTPUT
