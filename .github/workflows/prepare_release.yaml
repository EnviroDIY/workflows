name: Prepare a new release and add release assets

on:
  workflow_dispatch:
  workflow_call:

env:
  PLATFORMIO_AUTH_TOKEN: ${{ secrets.PLATFORMIO_AUTH_TOKEN }}

jobs:
  check_for_dependencies:
    name: Prepare release assets containing dependencies
    runs-on: ubuntu-latest
    outputs:
      has_dependencies: ${{ steps.check_for_deps.outputs.has_dependencies }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Install all the library dependencies!
      - name: Install the library dependencies to zip up for the release
        id: check_for_deps
        run: |
          if [ -e continuous_integration/install-deps-platformio.sh ]
          then
            echo "Dependency installation script fount at continuous_integration/install-deps-platformio.sh"
            echo "has_dependencies=true" >> $GITHUB_OUTPUT
          else
            echo "File continuous_integration/install-deps-platformio.sh doesn't exist.  Assuming no dependencies."
            echo "has_dependencies=false" >> $GITHUB_OUTPUT
          fi

  prepare_assets:
    name: Prepare release assets containing dependencies
    runs-on: ubuntu-latest
    needs: check_for_dependencies
    if: ${{ needs.check_for_dependencies.outputs.has_dependencies }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment variable for current library version
        run: |
          echo "::debug::Get the current version number"
          VER=$(cat VERSION)
          ZIP_FILE="${GITHUB_REPOSITORY#*/}_Dependencies_${VER}"
          echo "VERSION=$VER" >> $GITHUB_ENV
          echo "ZIP_NAME=$ZIP_FILE" >> $GITHUB_ENV

      - name: Set up python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio

      # Install all the library dependencies!
      - name: Install the library dependencies to zip up for the release
        id: install_release_deps
        run: |
          chmod +x continuous_integration/install-deps-platformio.sh
          sh continuous_integration/install-deps-platformio.sh

      - name: Install the library from the master branch
        run: |
          pio pkg install -g -l https://github.com/EnviroDIY/${GITHUB_REPOSITORY#*/}

      # Uninstall graphics libraries from Adafruit
      - name: Uninstall Adafruit GFX Library library
        continue-on-error: true
        run: |
          echo "::debug::Removing Adafruit GFX Library"
          pio pkg uninstall -g -l "adafruit/Adafruit GFX Library"

      - name: Uninstall Adafruit NeoPixel library
        continue-on-error: true
        run: |
          echo "::debug::Removing Adafruit NeoPixel"
          pio pkg uninstall -g -l "adafruit/Adafruit NeoPixel"

      - name: Uninstall Adafruit SSD1306 library
        continue-on-error: true
        run: |
          echo "::debug::Removing Adafruit SSD1306"
          pio pkg uninstall -g -l "adafruit/Adafruit SSD1306"

      - name: Uninstall Adafruit ADXL343 library
        continue-on-error: true
        run: |
          echo "::debug::Removing Adafruit ADXL343"
          pio pkg uninstall -g -l "adafruit/Adafruit ADXL343"

      - name: Uninstall Adafruit STMPE610 library
        continue-on-error: true
        run: |
          echo "::debug::Removing Adafruit STMPE610"
          pio pkg uninstall -g -l "adafruit/Adafruit STMPE610"

      - name: Uninstall Adafruit TouchScreen library
        continue-on-error: true
        run: |
          echo "::debug::Removing Adafruit TouchScreen"
          pio pkg uninstall -g -l "adafruit/Adafruit TouchScreen"

      - name: Uninstall Adafruit ILI9341 library
        continue-on-error: true
        run: |
          echo "::debug::Removing Adafruit ILI9341"
          pio pkg uninstall -g -l "adafruit/Adafruit ILI9341"

      # zip up all the installed libraries
      # need to cd into the pio directory so we don't get extra junk directories
      - name: Zip libraries
        run: |
          echo "::debug::Listing global libraries"
          pio pkg list -g -v --only-libraries
          echo "::debug::Zipping global libraries"
          cd /home/runner/.platformio/
          zip ${{ env.ZIP_NAME }}.zip -r lib
          mv ${{ env.ZIP_NAME }}.zip $GITHUB_WORKSPACE
          cd $GITHUB_WORKSPACE
          ls

      # Remove some extras from the zip
      - name: Remove git files from the zip
        continue-on-error: true
        run: |
          echo "::debug::Deleting extra files to decrease size of zip"
          echo "::debug::Removing Git folders"
          zip -d -q ${{ env.ZIP_NAME }} "*/.gitattributes" "*/.gitignore" "*/.gitmodules" "*/.github/*" "*.sh"  "*/Doxyfile" "*/.travis.yml"
      - name: Remove other pdfs from the zip
        continue-on-error: true
        run: |
          echo "::debug::Removing other pdfs"
          zip -d -q libraries "*/doc/*.pdf"
      - name: Remove TinyGSM extras from the zip
        continue-on-error: true
        run: |
          echo "::debug::Removing TinyGSM extras"
          zip -d -q libraries "*/TinyGSM/extras/*"
      - name: Remove YosemitechModbus extras from the zip
        continue-on-error: true
        run: |
          echo "::debug::Removing YosemitechModbus extras"
          zip -d -q libraries "*/YosemitechModbus/doc/*"
      - name: Remove SDFat extras from the zip
        continue-on-error: true
        run: |
          echo "::debug::Removing SDFat extras"
          zip -d -q libraries "*/SdFat/extras/*"

      - name: Store generated dependency zip
        uses: actions/upload-artifact@v4
        with:
          name: dependency_zip
          path: |
            ${{ env.ZIP_NAME }}.zip

  release:
    name: Prepare a new release
    runs-on: ubuntu-latest
    needs: check_for_dependencies

    steps:
      - name: Get change log entry for release notes
        id: changelog_reader
        uses: mindsers/changelog-reader-action@v2
        with:
          path: ChangeLog.md
          version: ${{ env.VERSION }}

      - name: Download the prepared examples
        if: ${{ needs.check_for_dependencies.outputs.has_dependencies }}
        uses: actions/download-artifact@v4
        with:
          name: dependency_zip

      # Create a new release with zipped dependencies
      - name: Create release with assets
        if: ${{ needs.check_for_dependencies.outputs.has_dependencies }}
        id: create_release_with_zip
        uses: softprops/action-gh-release@v2.0.5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ format('v{0}',env.VERSION) }}
          name: ${{ format('v{0}',env.VERSION) }}
          draft: ${{ steps.changelog_reader.outputs.status == 'unreleased' }}
          prerelease: ${{ steps.changelog_reader.outputs.status == 'prereleased' }}
          body: ${{ steps.changelog_reader.outputs.changes }}
          generate_release_notes: false
          files: ${{ format('./{0}.zip', env.ZIP_NAME) }}
          fail_on_unmatched_files: true

      # Create a new release with no zip
      - name: Create release with assets
        id: create_bare_release
        if: ${{ ! needs.check_for_dependencies.outputs.has_dependencies }}
        uses: softprops/action-gh-release@v2.0.5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ format('v{0}',env.VERSION) }}
          name: ${{ format('v{0}',env.VERSION) }}
          draft: ${{ steps.changelog_reader.outputs.status == 'unreleased' }}
          prerelease: ${{ steps.changelog_reader.outputs.status == 'prereleased' }}
          body: ${{ steps.changelog_reader.outputs.changes }}
          generate_release_notes: false

      # Publish the new release to the PlatformIO package manager
      - name: Publish release to the PlatformIO package manager
        id: publish-pio
        run: pio package publish --owner envirodiy --non-interactive
