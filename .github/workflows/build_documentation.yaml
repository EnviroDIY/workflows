name: Build Documentation with Doxygen

on:
  workflow_call:
    inputs:
      publish:
        description: 'Publish Documentation to GitHub Pages'
        required: true
        type: boolean
      rebuild_cache_number:
        description: 'Change this number to force a cache rebuild'
        required: true
        type: number
      doxygen_version:
        description: 'The version of Doxygen to build'
        required: false
        type: string
        default: '1.12.0'
      build_doxygen:
        description: 'True to rebuild Doxygen from source instead of using a tarball release'
        required: false
        type: boolean
        default: false
      use_graphviz:
        description: 'True use GraphViz/dot'
        required: false
        type: boolean
        default: true
      graphviz_version:
        description: 'The version of GraphViz to build'
        required: false
        type: string
        default: '11.0.0' #2.43.0 is the latest on apt-get, but it can't make svgs
      # build_graphviz:
      #   description: 'True to rebuild GraphViz from source instead of using a tarball release'
      #   required: false
      #   type: boolean
      #   default: false
  # Also give a manual trigger
  workflow_dispatch:
    inputs:
      publish:
        description: 'Publish Documentation to GitHub Pages'
        required: true
        type: boolean
      rebuild_cache_number:
        description: 'Change this number to force a cache rebuild'
        required: true
        type: number

jobs:
  doc_build:
    runs-on: ubuntu-latest
    if: ${{ ! contains(github.event.head_commit.message, 'ci skip') }}
    name: Build documentation

    steps:
      - name: Set doc root env variable
        run: |
          echo "DOC_ROOT=code_docs/${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV

      - name: Print the doc root directory environment variable
        run: |
          echo "${{ env.DOC_ROOT }}"

      # check out the library repo into a subfolder
      - uses: actions/checkout@v4
        with:
          path: ${{ env.DOC_ROOT }}

      - name: Pull the requirements file
        run: |
          curl -SL https://raw.githubusercontent.com/EnviroDIY/workflows/main/scripts/doxygen_mcss_requirements.txt -o requirements.txt

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          cache: 'pip'

      - name: Install python dependencies for m.css
        run: |
          pip install --upgrade --upgrade-strategy only-if-needed -r requirements.txt

      # NOTE: The packages mostly match scheme-medium, with the removal of some languages and addition of standalone
      # https://tug.org/svn/texlive/trunk/Master/tlpkg/tlpsrc/scheme-medium.tlpsrc?view=markup
      - name: Install or Restore Tex Live
        id: install_tex_live
        uses: zauguin/install-texlive@v3
        with:
          packages: >
            collection-basic collection-context collection-fontsrecommended collection-fontsextra collection-fontutils collection-langenglish collection-latex collection-latexrecommended collection-latexextra collection-mathscience dvisvgm
          cache_version: ${{ inputs.rebuild_cache_number }}

      - name: Install or Restore basic apt-get packages
        id: install_apt_get_deps
        uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: >
            dia curl wget mscgen python3-tk ghostscript dvisvgm
          version: ${{ inputs.rebuild_cache_number }}
          debug: false

      # Install these dependencies for building libsodium and GraphViz using awalsh128/cache-apt-pkgs-action@v1
      - name: Install or Restore packages for building libsodium and GraphViz
        id: install_graphviz_build_deps
        if: inputs.use_graphviz
        # if: >-
        #   ${{
        #     (  inputs.build_graphviz &&
        #       (steps.check_graphviz_version.outcome != 'success' ||
        #           steps.check_graphviz_version.outputs.correct_graphviz != 'true')
        #     ) || (steps.install_graphviz_deb.outcome != 'success' &&
        #             steps.install_graphviz_deb.outcome != 'skipped')
        #   }}
        uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: >
            libtool libltdl-dev automake autoconf pkg-config
            perl libperl-dev libsodium libsodium-dev argon2 libargon2-dev
          version: ${{ inputs.rebuild_cache_number }}
          debug: false

      # build from source if we said to and we have the wrong version,
      # or if the install from deb failed
      - name: Build GraphViz from Source
        if: inputs.use_graphviz
        # if: >-
        #   ${{
        #     (  inputs.build_graphviz &&
        #       (steps.check_graphviz_version.outcome != 'success' ||
        #           steps.check_graphviz_version.outputs.correct_graphviz != 'true')
        #     ) || (steps.install_graphviz_deb.outcome != 'success' &&
        #             steps.install_graphviz_deb.outcome != 'skipped')
        #   }}
        env:
          GRAPHVIZ_VERSION: ${{ inputs.graphviz_version }}
        run: |
          if [ "$RUNNER_DEBUG" = "1" ]; then
            echo "Enabling debugging!"
            set -v # Prints shell input lines as they are read.
            set -x # Print command traces before executing command.
          fi
          cd ${{ github.workspace }}/
          curl -SL https://raw.githubusercontent.com/EnviroDIY/workflows/main/scripts/build-install-graphviz.sh -o build-install-graphviz.sh
          chmod +x build-install-graphviz.sh
          bash build-install-graphviz.sh
          echo "${LD_LIBRARY_PATH}"
          # check the install location
          type -a dot
          # check the version
          dot -V
          # Attempt initial dot config
          sudo dot -c
          # test a simple command to make sure the linking works
          echo 'digraph { a -> b }' | dot -Tsvg > output.svg

      - name: Parse Doxygen Tag from Version
        id: parse_doxygen_version
        env:
          DOXYGEN_VERSION: ${{ inputs.doxygen_version }}
        run: |
          doxygen_tag=$(echo ${{ inputs.doxygen_version }} | sed "s/\./_/g")
          doxygen_tag="Release_$doxygen_tag"
          echo "Release tag for Doxgen version ${{ inputs.doxygen_version }} is ${doxygen_tag}"
          echo "doxygen_tag=${doxygen_tag}" >>$GITHUB_OUTPUT

      - name: Check Doxygen Version
        id: check_doxygen_version
        continue-on-error: true
        env:
          DOXYGEN_VERSION: ${{ inputs.doxygen_version }}
        run: |
          cd ${{ github.workspace }}/
          curl -SL https://raw.githubusercontent.com/EnviroDIY/workflows/main/scripts/check-doxygen-version.sh -o check-doxygen-version.sh
          chmod +x check-doxygen-version.sh
          bash check-doxygen-version.sh 2>&1

      - name: Install Doxygen from Tarball
        continue-on-error: true
        id: install_doxygen_tar
        if: >-
          ${{
            (  inputs.build_doxygen &&
              (steps.check_doxygen_version.outcome != 'success' ||
                  steps.check_doxygen_version.outputs.correct_doxygen != 'true')
            ) || (steps.install_doxygen_tar.outcome != 'success' &&
                    steps.install_doxygen_tar.outcome != 'skipped')
          }}
        run: |
          if [ "$RUNNER_DEBUG" = "1" ]; then
            echo "Enabling debugging!"
            set -v # Prints shell input lines as they are read.
            set -x # Print command traces before executing command.
          fi
          cd ${{ github.workspace }}/
          sudo apt-get remove --purge "^doxygen.*"
          curl -SL https://github.com/doxygen/doxygen/releases/download/${{ steps.parse_doxygen_version.outputs.doxygen_tag }}/doxygen-${{ inputs.doxygen_version }}.linux.bin.tar.gz -o doxygen-${{ inputs.doxygen_version }}.linux.bin.tar.gz
          tar zxf doxygen-${{ inputs.doxygen_version }}.linux.bin.tar.gz
          ls
          cd doxygen-${{ inputs.doxygen_version }}/
          sudo make install
          doxygen -v
          type -a doxygen

      # NOTE: Install dependencies for building Doxygen using awalsh128/cache-apt-pkgs-action@v1
      - name: Install or Restore apt-get packages for building Doxygen
        id: install_doxygen_build_deps
        if: >-
          ${{
            (  inputs.build_doxygen &&
              (steps.check_doxygen_version.outcome != 'success' ||
                  steps.check_doxygen_version.outputs.correct_doxygen != 'true')
            ) || (steps.install_doxygen_tar.outcome != 'success' &&
                    steps.install_doxygen_tar.outcome != 'skipped')
          }}
        uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: >
            build-essential flex bison
          version: ${{ inputs.rebuild_cache_number }}
          debug: false

      # build from source if we said to and we have the wrong version,
      # or if the install from tarball failed
      - name: Build Doxygen from Source
        if: >-
          ${{
            inputs.build_doxygen &&
            (  (steps.check_doxygen_version.outcome != 'success' ||
                  steps.check_doxygen_version.outputs.correct_doxygen != 'true') ||
                (steps.install_doxygen_tar.outcome != 'success' &&
                  steps.install_doxygen_tar.outcome != 'skipped')
            )
          }}
        env:
          DOXYGEN_VERSION: ${{ inputs.doxygen_version }}
          DOXYGEN_TAG: ${{ steps.parse_doxygen_version.outputs.doxygen_tag }}
        run: |
          cd ${{ github.workspace }}/
          curl -SL https://raw.githubusercontent.com/EnviroDIY/workflows/main/scripts/build-install-doxygen.sh -o build-install-doxygen.sh
          chmod +x build-install-doxygen.sh
          bash build-install-doxygen.sh
          doxygen -v
          type -a doxygen

      # check out my fork of m.css, for post-processing and re-formatting Doxygen output
      - name: Checkout m.css
        uses: actions/checkout@v4
        with:
          # Repository name with owner. For example, actions/checkout
          repository: SRGDamia1/m.css
          path: code_docs/m.css

      - name: Generate all the documentation
        id: generate_docs
        env:
          LD_LIBRARY_PATH: /usr/lib:/usr/local/lib:/usr/local/bin/dot:/usr/bin/dot:/opt/hostedtoolcache/Python/3.12.3/x64/lib
          WORKSPACE_DIR: ${{ github.workspace }}
        run: |
          fmtutil-user --all
          cd ${{ github.workspace }}/${{ env.DOC_ROOT }}/
          curl -SL https://raw.githubusercontent.com/EnviroDIY/workflows/main/scripts/generate-documentation.sh -o generate-documentation.sh
          chmod +x generate-documentation.sh
          bash generate-documentation.sh

      - name: Deploy to github pages
        if: inputs.publish
        uses: peaceiris/actions-gh-pages@v4.0.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ${{ github.workspace }}/${{ env.DOC_ROOT }}_Doxygen/m.css
