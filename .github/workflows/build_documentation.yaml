name: Check for Complete Documentation

on:
  workflow_call:
    inputs:
      publish:
        description: 'Publish Documentation to GitHub Pages'
        required: true
        type: boolean
      rebuild_cache_number:
        description: 'Change this number to force a cache rebuild'
        required: true
        type: number
      doxygen_version:
        description: 'The version of Doxygen to build'
        required: false
        type: string
        default: 'Release_1_11_0'
      graphviz_version:
        description: 'The version of GraphViz to build'
        required: false
        type: string
        default: '11.0.0'
  # Also give a manual trigger
  workflow_dispatch:
    inputs:
      publish:
        description: 'Publish Documentation to GitHub Pages'
        required: true
        type: boolean
      rebuild_cache_number:
        description: 'Change this number to force a cache rebuild'
        required: true
        type: number

jobs:
  doc_build:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    name: Build documentation

    steps:
      - name: Set doc root env variable
        run: |
          echo "DOC_ROOT=code_docs/${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV

      - name: Print the doc root directory environment variable
        run: |
          echo "${{ env.DOC_ROOT }}"

      # check out the library repo into a subfolder
      - uses: actions/checkout@v4
        with:
          path: ${{ env.DOC_ROOT }}

      - name: Pull the requirements file
        run: |
          curl -SL https://raw.githubusercontent.com/EnviroDIY/workflows/main/scripts/doxygen_mcss_requirements.txt -o requirements.txt

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          cache: 'pip'

      - name: Install python dependencies, including PlatformIO
        run: |
          pip install --upgrade --upgrade-strategy only-if-needed -r requirements.txt

      - name: Install or Restore Tex Live
        id: install_tex_live
        uses: zauguin/install-texlive@v3
        with:
          packages: scheme-medium
          cache_version: ${{ inputs.rebuild_cache_number }}

      - name: Install or Restore other apt-get packages
        id: install_apt_get_deps
        uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: >
            dia curl wget
            build-essential flex bison
            doxygen doxygen-doc doxygen-gui doxygen-latex
            graphviz mscgen ghostscript
            libtool libltdl-dev automake autoconf pkg-config
            libperl-dev libsodium-dev argon2 libargon2-0-dev
          version: ${{ inputs.rebuild_cache_number }}
          debug: false

      - name: Check Doxygen and GraphViz versions
        id: check_doxygen_version
        env:
          DOXYGEN_VERSION: ${{ inputs.doxygen_version }}
          GRAPHVIZ_VERSION: ${{ inputs.graphviz_version }}
        run: |
          echo package versions: ${{ steps.install_apt_get_deps.outputs.package-version-list }}
          # sudo apt update          # Fetches the list of available updates
          # sudo apt upgrade -y      # Installs some updates; does not remove packages
          # sudo apt full-upgrade -y # Installs updates; may also remove some packages, if needed
          # sudo apt autoremove -y   # Removes any old packages that are no longer needed
          doxygen -v
          installed_doxygen=$(doxygen -v)
          installed_doxygen=${installed_doxygen=#* }
          echo "Current Doxygen version is ${installed_doxygen}"
          requested_doxygen=$(echo "$DOXYGEN_VERSION" | sed "s/Release_//g")
          requested_doxygen=$(echo "$requested_doxygen" | sed "s/_/./g")
          echo "Requested Doxygen version was ${requested_doxygen}"
          echo "installed_doxygen=${installed_doxygen}" >> $GITHUB_OUTPUT
          echo "requested_doxygen=${requested_doxygen}" >> $GITHUB_OUTPUT
          if [ "$installed_doxygen" = "$requested_doxygen" ]
          then
            echo "The requested Doxygen version is already installed"
            echo "correct_doxygen=true" >> $GITHUB_OUTPUT
          else
            echo "The installed Doxygen version is different than requestsed"
            echo "correct_doxygen=false" >> $GITHUB_OUTPUT
          fi
          dot -V
          installed_graphviz_full=$(dot -V)
          # dot - graphviz version 2.43.0 (0)
          echo "${installed_graphviz_full}"
          installed_graphviz=$(cut -c 23:7 <<< "${installed_graphviz_full:24:7}")
          echo "${installed_graphviz}"
          installed_graphviz=${installed_graphviz=#* }
          echo "Current GraphViz version is ${installed_graphviz}"
          echo "The requested GraphViz version was ${GRAPHVIZ_VERSION}"
          if [ "$installed_graphviz" = "$GRAPHVIZ_VERSION" ]
          then
            echo "The requested GraphViz version is already installed"
            echo "correct_graphviz=true" >> $GITHUB_OUTPUT
          else
            echo "The installed GraphViz version is different than requestsed"
            echo "correct_graphviz=false" >> $GITHUB_OUTPUT
          fi

      - name: Install GraphViz from Tarball
        if: ${{ ! inputs.build_doxygen && steps.check_doxygen_version.outputs.correct_doxygen != 'true'}}
        run: |
          cd ${{ github.workspace }}/${{ env.DOC_ROOT }}/
          sudo apt-get remove graphviz
          # build and install libsodium
          cd ${{ github.workspace }}/${{ env.DOC_ROOT }}/
          curl -SL https://download.libsodium.org/libsodium/releases/LATEST.tar.gz -o LATEST.tar.gz
          tar zxf LATEST.tar.gz
          ls
          cd libsodium-stable/
          ./configure
          sudo make
          sudo make install
          # build and install graphviz
          cd ${{ github.workspace }}/${{ env.DOC_ROOT }}/
          curl -SL https://gitlab.com/api/v4/projects/4207231/packages/generic/graphviz-releases/${{ inputs.graphviz_version }}/graphviz-${{ inputs.graphviz_version }}.tar.gz -o graphviz-${{ inputs.graphviz_version }}.tar.gz
          tar zxf graphviz-${{ inputs.graphviz_version }}.tar.gz
          ls
          cd graphviz-${{ inputs.graphviz_version }}/
          ./configure
          sudo make
          sudo make install

      - name: Install Doxygen from Tarball
        if: ${{ ! inputs.build_doxygen && steps.check_doxygen_version.outputs.correct_doxygen != 'true'}}
        run: |
          cd ${{ github.workspace }}/${{ env.DOC_ROOT }}/
          sudo apt-get remove doxygen
          curl -SL https://github.com/doxygen/doxygen/releases/download/${{ inputs.doxygen_version }}/doxygen-${{ steps.check_doxygen_version.outputs.requested_doxygen }}.linux.bin.tar.gz -o doxygen-${{ steps.check_doxygen_version.outputs.requested_doxygen }}.linux.bin.tar.gz
          tar zxf doxygen-${{ steps.check_doxygen_version.outputs.requested_doxygen }}.linux.bin.tar.gz
          ls
          cd doxygen-${{ steps.check_doxygen_version.outputs.requested_doxygen }}/
          sudo make install

      # check out my fork of m.css, for post-processing and re-formatting Doxygen output
      - name: Checkout m.css
        uses: actions/checkout@v4
        with:
          # Repository name with owner. For example, actions/checkout
          repository: SRGDamia1/m.css
          path: code_docs/m.css

      - name: Generate all the documentation
        id: generate_docs
        run: |
          cd ${{ github.workspace }}/${{ env.DOC_ROOT }}/
          curl -SL https://raw.githubusercontent.com/EnviroDIY/workflows/main/scripts/generate-documentation.sh -o generate-documentation.sh
          chmod +x generate-documentation.sh
          sh generate-documentation.sh 2>&1 | tee doxygen_run_output.log
          result_code=${PIPESTATUS[0]}
          echo "doxygen_warnings=$(cat docs/output_doxygen.log)" >> $GITHUB_OUTPUT
          echo "mcss_warnings=$(cat docs/output_mcss.log)" >> $GITHUB_OUTPUT
          echo "## Doxygen completed with the following warnings:" >> $GITHUB_STEP_SUMMARY
          echo "$(cat docs/output_doxygen.log)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## mcss Doxygen post-processing completed with the following warnings:" >> $GITHUB_STEP_SUMMARY
          echo "$(cat docs/output_mcss.log)" >> $GITHUB_STEP_SUMMARY
          echo "Finished generating documentation"
          exit $result_code

      - name: Deploy to github pages
        if: inputs.publish
        uses: peaceiris/actions-gh-pages@v4.0.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ${{ github.workspace }}/${{ env.DOC_ROOT }}_Doxygen/m.css
